#!/usr/bin/python

import json
import sys
import re
import copy
import os

BLUE = '\033[94m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

class colortext:
  def __init__(self, text, color):
    self.text = text
    self.color = color
  def __len__(self):
    return len(self.text)
  def __str__(self):
    return BOLD + self.color + self.text + ENDC
def green(s):
  return colortext(s, GREEN)
def red(s):
  return colortext(s, RED)

def displayTag(t):
  return t

def json_careful_loads(s):
  try:
    return json.loads(s)
  except Exception as e:
    sys.stderr.write("[ERR] Error while parsing json: {}\n".format(e))
    sys.exit(1)

def json_careful_readlines(f):
  return [ json_careful_loads(line.rstrip('\n')) for line in f ]

def safeInsert(dict, key, value):
  if key not in dict:
    dict[key] = value
  else:
    sys.stderr.write("[WARN] Key {} is already in use; trying _{} instead.\n".format(key))
    safeInsert(dict, "_" + key, value)

def reCompile(exp):
  return re.compile(exp, re.MULTILINE)

# def parseCommaInteger(s):
#   return int(s.replace(",", ""))

# local reclaimed: 32859049984
# num local: 20999
# local gc time: 4541
# promo time: 8

def parseKiB(kibStr):
  return float(int(kibStr)) * 1024.0 / 1000.0

def parseB(bytesStr):
  return int(bytesStr) / 1000.0

def parseExectimes(stdout):
  pat = reCompile(r"^exectime\s+(\d+.\d+)s$")
  return [float(x) for x in pat.findall(stdout)]

statsPatterns = \
  [ #("time", float, reCompile(r"^end-to-end\s+(\d+.\d+)s$"))
  #,
    ("space", parseKiB, reCompile(r"^\s*Maximum resident set size \(kbytes\): (\d+).*$"))
  # , ("num-local", int, reCompile(r"^num local: (\d+)$"))
  # , ("local-reclaimed", parseB, reCompile(r"^local reclaimed: (\d+)$"))
  # , ("local-time", int, reCompile(r"^local gc time: (\d+)$"))
  # , ("promo-time", int, reCompile(r"^promo time: (\d+)$"))
  # , ("root-reclaimed", parseB, reCompile(r"^root cc reclaimed: (\d+)$"))
  # , ("internal-reclaimed", parseB, reCompile(r"^internal cc reclaimed: (\d+)$"))
  # , ("num-root", int, reCompile(r"^num root cc: (\d+)$"))
  # , ("num-internal", int, reCompile(r"^num internal cc: (\d+)$"))
  # , ("root-time", int, reCompile(r"^root cc time: (\d+)$"))
  # , ("internal-time", int, reCompile(r"^internal cc time: (\d+)$"))
  # , ("working-set", parseCommaInteger, reCompile(r"^max bytes live: (.*) bytes$"))
  ]

renameConfig = {
  'mlton': 'mlton',
  'mpl': 'mpl',
  'mpl-cc': 'mpl-cc',
  'cpp': 'cpp'
}

foundTags = set()
foundProcs = set()

def parseStats(row):
  newRow = copy.deepcopy(row)
  for (name, convert, pat) in statsPatterns:
    m = pat.search(newRow['stdout'] + newRow['stderr'])
    if m:
      safeInsert(newRow, name, convert(m.group(1)))
  newRow['procs'] = int(newRow.get('procs', '1'))
  newRow['config'] = renameConfig[row['config']]

  tms = parseExectimes(newRow['stdout'] + newRow['stderr'])
  tms = tms[-10:]
  try:
    newRow['avgtime'] = sum(tms) / len(tms)
  except:
    newRow['avgtime'] = None

  # try:
  #   newRow['space'] = float(newRow['space'])
  # except KeyError:
  #   pass

  # try:
  #   newRow['time'] = float(newRow['elapsed'])
  # except KeyError:
  #   pass

  foundTags.add(newRow['tag'])
  foundProcs.add(newRow['procs'])

  return newRow

def findTrials(data, config, tag, impl, procs):
  result = []
  for row in data:
    if (row['config'] == config and \
        row['tag'] == tag and \
        row['impl'] == impl and \
        row['procs'] == procs):
      result.append(row)
  return result

# ======================================================================

def averageTime(data, config, tag, impl, procs):
  tms = [ r['avgtime'] for r in findTrials(data, config, tag, impl, procs) if 'avgtime' in r ]
  try:
    return tms[-1]
  except:
    return None

def averageSpace(data, config, tag, impl, procs):
  sp = [ r['space'] for r in findTrials(data, config, tag, impl, procs) if 'space' in r ]

  if len(sp) > 10:
    sp = sp[-10:]

  try:
    return sum(sp) / len(sp)
  except:
    return None


def tm(t):
  if t is None:
    return None
  if t == 0.0:
    return int(0)
  # if t > 10.0:
  #   return int(round(t))
  try:
    # if t < 1.0:
    #   return round(t, 3)
    if t < 10.0:
      return round(t, 2)
    elif t < 100.0:
      return round(t, 1)
    else:
      return round(t)
  except TypeError:
    print ("[ERR] Got type error trying to round {}".format(repr(t)))
    return None

def ov(x):
  if x is None:
    return None
  return "{:.2f}".format(x)

def su(x):
  if x is None:
    return None
  return str(int(round(x)))

def bu(x):
  if x is None:
    return None
  return "{:.1f}".format(x)

def sp(kb):
  if kb is None:
    return None
  num = kb
  for unit in ['K','M','G']:
    if num < 1000:
      return "%3.1f %s" % (num, unit)
    num = num / 1000
  return "%3.1f %s" % (num, 'T')

# =========================================================================

delimWidth = 2

def makeline(row, widths, align):
  bits = []
  i = 0
  while i < len(row):
    j = i+1
    while j < len(row) and (row[j] is None):
      j += 1
    availableWidth = sum(widths[i:j]) + delimWidth*(j-i-1)
    s = str(row[i])
    w = " " * (availableWidth - len(row[i]))
    aa = align(i)
    if aa == "l":
      ln = s + w
    elif aa == "r":
      ln = w + s
    elif aa == "c":
      ln = w[:len(w)/2] + s + w[len(w)/2:]
    else:
      raise ValueError("invalid formatter: {}".format(aa))
    bits.append(ln)
    i = j
  return (" " * delimWidth).join(bits)

def table(rows, align=None):
  numCols = max(len(row) for row in rows if not isinstance(row, str))

  widths = [0] * numCols
  for row in rows:
    # string rows are used for formatting
    if isinstance(row, str):
      continue

    i = 0
    while i < len(row):
      j = i+1
      while j < len(row) and (row[j] is None):
        j += 1
      # rw = len(stripANSI(str(row[i])))
      # rw = len(str(row[i]))
      rw = len(row[i])
      for k in xrange(i, j):
        w = (rw / (j-i)) + (1 if k < rw % (j-i) else 0)
        widths[k] = max(widths[k], w)
      i = j

  totalWidth = sum(widths) + delimWidth*(numCols-1)

  def aa(i):
    try:
      return align(i)
    except:
      return "l"

  output = []
  for row in rows:
    if row == "-" or row == "=":
      output.append(row * totalWidth)
      continue
    elif isinstance(row, str):
      raise ValueError("bad row: {}".format(row))
    output.append(makeline(row, widths, aa))

  return "\n".join(output)

# =========================================================================

def mostRecentResultsFile(ws=False):
  files = os.listdir("results")
  pattern = r'\d{6}-\d{6}'
  if ws:
    pattern = r'ws-' + pattern
  # A bit of a hack. Filenames are ...YYMMDD-hhmmss, so lexicographic string
  # comparison is correct for finding the most recent (i.e. maximum) file
  mostRecent = max(p for p in files if re.match(pattern, p))
  return mostRecent

if len(sys.argv) > 1:
  timingsFile = sys.argv[1]
else:
  print("[INFO] no results file argument; finding most recent")
  try:
    mostRecent = mostRecentResultsFile()
  except:
    print("[ERR] could not find most recent results file\n " + \
          "  check that these are formatted as 'YYMMSS-hhmmss'")
    sys.exit(1)
  timingsFile = os.path.join('results', mostRecent)

print("[INFO] reading {}\n".format(timingsFile))
with open(timingsFile, 'r') as data:
  resultsData = json_careful_readlines(data)
D = [ parseStats(row) for row in resultsData ]
P = sorted(list(foundProcs))
maxp = max(foundProcs)

orderedTags = sorted(list(foundTags))

def implsOfTag(t):
  result = set()
  for r in D:
    if 'tag' in r and r['tag'] == t and 'impl' in r:
      result.add(r['impl'])
  return result

def defaultAlign(i):
  return "r" if i == 0 else "l"

headers = ['Benchmark', 'Impl', 'MPL(1)', 'C++(1)', 'MPL({})'.format(maxp), 'C++({})'.format(maxp)]
tt = [headers, "="]
for tag in orderedTags:
  for impl in implsOfTag(tag):
    thisRow = [tag,
               impl,
               tm(averageTime(D, 'mpl-cc', tag, impl, 1)),
               tm(averageTime(D, 'cpp', tag, impl, 1)),
               tm(averageTime(D, 'mpl-cc', tag, impl, maxp)),
               tm(averageTime(D, 'cpp', tag, impl, maxp))
              ]
    thisRow = [thisRow[0]] + [str(x) if x is not None else "--" for x in thisRow[1:]]
    tt.append(thisRow)

print("TIMINGS")
print(table(tt, defaultAlign))
print("")

headers = ['Benchmark', 'Impl', 'MPL(1)', 'C++(1)', 'MPL({})'.format(maxp), 'C++({})'.format(maxp)]
tt = [headers, "="]
for tag in orderedTags:
  for impl in implsOfTag(tag):
    thisRow = [tag,
               impl,
               sp(averageSpace(D, 'mpl-cc', tag, impl, 1)),
               sp(averageSpace(D, 'cpp', tag, impl, 1)),
               sp(averageSpace(D, 'mpl-cc', tag, impl, maxp)),
               sp(averageSpace(D, 'cpp', tag, impl, maxp))
              ]
    thisRow = [ (x if x is not None else "--") for x in thisRow ]
    tt.append(thisRow)

print("SPACE (MAX RESIDENCY)")
print(table(tt, defaultAlign))
print("")

# percent difference (b-a)/|a|
def pcd(b, a):
  try:
    xx = 100.0 * (b-a) / abs(a)
    result = ("+" if xx >= 0.0 else "") + ("{:.1f}%".format(xx))
    if xx > 0.0:
      return red(result)
    else:
      return result
  except:
    return None

def sd(x, y):
  try:
    return x / y
  except:
    return None

def ss(x, y):
  try:
    return x - y
  except:
    return None

def noLeadZero(x):
  try:
    if "0" == x[:1]:
      return x[1:]
  except:
    pass
  return x

# header = ["Benchmark", "Impl", "Time(1)", "Time({})".format(maxp), "Space(1)", "Space({})".format(maxp)]
# tt = [header, "="]
# for tag in orderedTags:
#   for impl in implsOfTag(tag):
#     # tMLton = tm(averageTime(D, 'mlton', tag, 1))
#     tMPL1 = tm(averageTime(D, 'mpl', tag, impl, 1))
#     tMPLp = tm(averageTime(D, 'mpl', tag, impl, maxp))
#     tMPLcc1 = tm(averageTime(D, 'mpl-cc', tag, impl, 1))
#     tMPLccp = tm(averageTime(D, 'mpl-cc', tag, impl, maxp))
#     # rMLton = averageSpace(D, 'mlton', tag, 1)
#     rMPL1 = averageSpace(D, 'mpl', tag, impl, 1)
#     rMPLp = averageSpace(D, 'mpl', tag, impl, maxp)
#     rMPLcc1 = averageSpace(D, 'mpl-cc', tag, impl, 1)
#     rMPLccp = averageSpace(D, 'mpl-cc', tag, impl, maxp)

#     t1 = pcd(tMPLcc1, tMPL1)
#     tp = pcd(tMPLccp, tMPLp)
#     r1 = pcd(rMPLcc1, rMPL1)
#     rp = pcd(rMPLccp, rMPLp)

#     row = [tag, impl, t1, tp, r1, rp]
#     row = [x if x is not None else "--" for x in row]
#     tt.append(row)

# print("MPL/CC versus MPL")
# print(table(tt, defaultAlign))
# print("")

def arrayVsDelayTime(config, tag, procs):
  arrt = tm(averageTime(D, config, tag, 'array', procs))
  delt = tm(averageTime(D, config, tag, 'delay', procs))
  rat = sd(arrt, delt)
  return ov(rat)

def arrayVsDelaySpace(config, tag, procs):
  arrr = averageSpace(D, config, tag, 'array', procs)
  delr = averageSpace(D, config, tag, 'delay', procs)
  rat = sd(arrr, delr)
  return ov(rat)

header1 = ["Benchmark", "MPL(1)", "MPL({})".format(maxp), "C++(1)", "C++({})".format(maxp)]
tt = [header1, "="]
for tag in orderedTags:
  row = [
    tag,
    arrayVsDelayTime('mpl-cc', tag, 1),
    arrayVsDelayTime('mpl-cc', tag, maxp),
    arrayVsDelayTime('cpp', tag, 1),
    arrayVsDelayTime('cpp', tag, maxp)
  ]
  row = [x if x is not None else "--" for x in row]
  tt.append(row)

print("ARRAY versus DELAY: time improvement factors")
print(table(tt, defaultAlign))
print("")

header1 = ["Benchmark", "MPL(1)", "MPL({})".format(maxp), "C++(1)", "C++({})".format(maxp)]
tt = [header1, "="]
for tag in orderedTags:
  row = [
    tag,
    arrayVsDelaySpace('mpl-cc', tag, 1),
    arrayVsDelaySpace('mpl-cc', tag, maxp),
    arrayVsDelaySpace('cpp', tag, 1),
    arrayVsDelaySpace('cpp', tag, maxp)
  ]
  row = [x if x is not None else "--" for x in row]
  tt.append(row)

print("ARRAY versus DELAY: space improvement factors")
print(table(tt, defaultAlign))
print("")

print("[INFO] done reporting {}".format(timingsFile))
